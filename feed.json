{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ainita Technical Docs",
    "description": "",
    "home_page_url": "https://toni-ainita-net.github.io/tech-docs",
    "feed_url": "https://toni-ainita-net.github.io/tech-docs/feed.json",
    "user_comment": "",
    "author": {
        "name": "Toni"
    },
    "items": [
        {
            "id": "https://toni-ainita-net.github.io/tech-docs/eotk.html",
            "url": "https://toni-ainita-net.github.io/tech-docs/eotk.html",
            "title": "EOTK",
            "summary": "EOTK (the Enterprise Onion Toolkit) Installation Macro Steps Generate a “vanity” .onion domain name using mkp2240. Install and configure EOTK on a remote web server.",
            "content_html": "<h1 id=\"eotk-the-enterprise-onion-toolkit\">EOTK (the Enterprise Onion Toolkit)</h1>\n<h2 id=\"installation-macro-steps\">Installation Macro Steps</h2>\n<ol>\n<li><p>Generate a “vanity” .onion domain name using mkp2240.</p>\n</li>\n<li><p>Install and configure EOTK on a remote web server.</p>\n</li>\n<li><p>Install trusted TLS certificates from HARICA into EOTK.</p>\n</li>\n</ol>\n<h2 id=\"generate-a-vanity-onion-domain-name-using-mkp2240\">Generate a “vanity” .onion domain name using mkp2240</h2>\n<h3 id=\"using-mkp224o-to-generate-vanity-onion-domain-names\">Using mkp224o to Generate “Vanity” Onion Domain Names</h3>\n<p>Generate these vanity onion domain names using a tool called <a href=\"https://github.com/cathugger/mkp224o\">mkp224o</a> (Github Link).\nNote that mkp224o program is essentially an “onion miner”.</p>\n<p>Example of Vanity addresses</p>\n<p>BBC NEWS\n<a href=\"https://www.bbcnewsd73hkzno2ini43t4gblxvycyac5aw4gnv7t2rccijh7745uqd.onion/\">https://www.bbcnewsd73hkzno2ini43t4gblxvycyac5aw4gnv7t2rccijh7745uqd.onion/</a> </p>\n<p>Twitter\n<a href=\"http://twitter3e4tixl4xyajtrzo62zg5vztmjuricljdp2c5kshju4avyoid.onion/\">http://twitter3e4tixl4xyajtrzo62zg5vztmjuricljdp2c5kshju4avyoid.onion/</a></p>\n<p>NY Times \n<a href=\"http://nytimesn7cgmftshazwhfgzm37qxb44r64ytbb2dj3x62d2lljsciiyd.onion/\">http://nytimesn7cgmftshazwhfgzm37qxb44r64ytbb2dj3x62d2lljsciiyd.onion/</a> </p>\n<pre><code># Downloading mkp224o\n&gt; git clone https://github.com/cathugger/mkp224o.git\n\n# Tool to compile mkp224o\n&gt; sudo apt install gcc libsodium-dev make autoconf\n\n# Generate a ./configure autoconf script\n&gt; cd mkp224o&lt;br/&gt;&lt;br/&gt;&gt; ./autogen.s\n\n# Configuration options to generate onions faster\n# OPTIMISATION.txti\n# https://github.com/cathugger/mkp224o/blob/master/OPTIMISATION.txt\n\n# Configuring mkp224o with optimal feature flags for a modern CPU\n&gt; ./configure --enable-amd64-51-30k --enable-intfilter\n\n# Compile the program\n&gt; make\n&gt; ./mkp224o -h\n\n# Create a ./my-filters.txt file with a list of &quot;filters&quot; that we want \n# our onion domain to be. Tips when mining Onion Addresses \n# https://github.com/alecmuffett/eotk/blob/master/docs.d/TIPS-FOR-MINING-ONIONS.md\n&gt; nano ./my-filters.txt\n\n# example of a filter file\n# hongonion\n# shenhong\n# hongblog\n# shenblog\n# shensite\n# hongio\n# shenio\n\n# The directory ./candidates/ which will contain all the matching domains\n# PASSPHRASE should be longer than 64 random characters\n&gt; ./mkp224o -s --checkpoint checkpoint.txt -d candidates -f my-filters.txt -B -p PASSPHRASE\n\n\n# For a 75% chance to &quot;mine&quot; a single 8-character vanity onion domain \n# name, you will need approximately 31 hours on a modern Intel i7 CPU. \n# That same 8-character vanity onion domain name will take less than \n# 5 hours on a high-end AMD EPYC 7003 server CPU with 24 cores. \n# That same powerful server CPU will take more than 4 days to mine a \n# 9-character onion\n# More than 191 days to mine a 10-character onion!\n</code></pre>\n<h2 id=\"install-and-configure-eotk-on-a-remote-web-server\">Install and configure EOTK on a remote web server</h2>\n<h3 id=\"introduction-to-eotk-the-enterprise-onion-toolkit\">Introduction to EOTK: The Enterprise Onion Toolkit</h3>\n<p>EOTK serves as a translator which allows Tor Network users to visit a site as an onion site, and for the site to respond as an onion site.</p>\n<p><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/1.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></p>\n<p>EOTK sits between the application and Nginx, dynamically rewriting requests that cross the Tor Network.\nEOTK is effectively a modified Nginx reverse proxy, which “translates” requests between the Tor Network, and your application’s regular reverse proxy.\nThe connection between EOTK and your Web Application is not direct, but rather EOTK is a layer “on top of” your regular Nginx reverse proxy.</p>\n<h3 id=\"installing-eotk-on-ubuntu-2004\">Installing EOTK on Ubuntu (20.04)</h3>\n<p>It is possible to install EOTK in: \ncentos-8.2.2004; freebsd-12.1; macos-catalina; macos-mojave; raspbian-stretch\nubuntu-18.04; ubuntu-20.04</p>\n<pre><code># Place yourself in the home directory\n&gt; cd ~\n\n# Clone the EOTK repository onto your remote webserver\n&gt; git clone https://github.com/alecmuffett/eotk.git\n&gt; cd ./eotk\n&gt; ./opt.d/build-ubuntu-20.04.sh\n\n&gt; tree -L 3\n.\n│   # Directories\n├── demo.d\n├── docs.d\n├── lib.d\n├── opt.d\n├── projects.d\n├── secrets.d\n├── templates.d\n├── tools.d\n│   ├── openresty.d\n│   ├── tor -&gt; /root/eotk/opt.d/tor.d/bin/tor\n│   └── tor.d\n│\n│   # Executables\n├── eotk\n├── eotk-housekeeping.sh\n├── eotk-init.sh\n│\n│   # Other files\n├── LICENSE\n├── Makefile\n└── README.md\n\n# Example site configuration files for demonstration. \n# The wikipedia.conf file is a good source of inspiration\ndemo.d\n\n# Documentation\ndocs.d\n\n# Shell and Perl scripts used by the eotk binary.\nlib.d\n\n# Contains the Tor daemon, and OpenResty binaries.\nopt.d\n\n# This is equivalent to your /etc/nginx/sites-available/ folder. \n# All of your site configuration, and TLS keys will be held here.\nprojects.d\n\n# This directory exclusively holds the public-key pairs for your \n# .onion domain. \nsecrets.d\n\n# Using in the building process of the eotk binary, as well as \n# to generate project configuration files.\ntemplates.d\n\n# Contains tools.\ntools.d\n\n# Every website you choose to make available as an onion site\n# will have its own folder within projects.d\nprojects.d\n├── website1.com.d # Includes all subdomains of website1.com\n├── website2.net.d\n└── website3.org.d\n</code></pre>\n<h4 id=\"eotk-binary-and-command-reference\">EOTK Binary and Command Reference</h4>\n<pre><code># Generates a Nginx configuration file from a given EOTK\n# configuration file.\n./eotk config &lt;website.com.conf&gt;\n\n# Checks the configuration syntax of a given project.\n# Analogous to nginx -t.\n./eotk syntax &lt;project&gt;\n\n# Reloads the configuration file of a given project.\n# Analogous to systemctl reload nginx.\n./eotk nxreload &lt;project&gt;\n\n# Displays the status of a given project. To list the status\n# of all projects, call with -a.\n./eotk status &lt;project&gt;\n\n# Starts a given project. Analogous to linking a Nginx file\n# from /etc/nginx/sites-available to /etc/nginx/sites-enabled\n./eotk start &lt;project&gt;\n\n# Restarts a given project. Analogous to systemctl restart nginx.\n./eotk restart &lt;project&gt;\n\n# Stops a given project. Analogous to systemctl stop nginx.\n./eotk stop &lt;project&gt;\n\n# Lists all projects.\n./eotk projects\n</code></pre>\n<h4 id=\"creating-eotk-configuration-files-for-projects\">Creating EOTK Configuration Files for Projects</h4>\n<pre><code># Create a folder within \n# ~/eotk/projects.d/, such as ~/eotk/projects.d/example.com.d\n&gt; set project domain_name\n\n# In the mining machine\nstop mkp224o (Ctrl + C) \n# Inside the candidates/ directory there are some folders like\n# domain_name.onion/\n# Select the best domain_name for the project\n# Inside there are the following files:\n# hostname (contains the .onion domain)\n# hs_ed25519_public_key (public and private key pair)\n# hs_ed25519_secret_key\n</code></pre>\n<h4 id=\"configuring-hardmaps-for-eotk-projects\">Configuring Hardmaps for EOTK Projects</h4>\n<pre><code>&gt; cd ~/eotk/\n&gt; cat domain_name.conf\nset project domain_name\nhardmap fshy2rdkdxzy42iurxqdj4opmm4mbpohc57mqc7dolzwjtbbmm76u6iy domain_name.com stories\n</code></pre>\n<h4 id=\"creating-regular-onion-address\">Creating regular Onion Address</h4>\n<pre><code>&gt; nano your_project.tconf\n\n# Edit “your_project.tconf”\n# exit with “Ctrl S” “Ctrl X”\nset project your_project\nhardmap %NEW_V3_ONION% your_website.com\n\n&gt; ./eotk config your_project.tconf\n&gt; rm your_project.tconf\n&gt; more your_project.conf\n# your_project.conf will have the onion_address to use it the TOR browser\nset project your_project\nhardmap onion_address your_website.com\n\n# Try the onion_address.onion in TOR\n&gt; ./eotk start your_project\n</code></pre>\n<h4 id=\"activating-deactivating-and-reloading-eotk-configuration\">Activating, Deactivating, and Reloading EOTK configuration</h4>\n<pre><code>&gt; ./eotk config domain_name.conf\n# EOTK will create the directory in \n# ~/eotk/projects.d/domain_name.d/eotk which will contain all our \n# project-specific configuration, and startup/shutdown scripts.\n# EOTK will instantiate a project-specific Nginx instance, with\n# an autogenerated Nginx configuration file at\n# ~/eotk/projects.d/domain_name.d/nginx.conf. This configuration file\n# will contain the OpenResty rewriting rules that &quot;translate&quot; our\n# clearnet site to an onion site, and vice versa.\n# EOTK will configure the tor daemon service with the provided\n# onion domain key-files, to create a hardmap to our \n# EOTK Nginx instance. It will autogenerate a Tor configuration file at\n# ~/eotk/projects.d/domain_name.d/tor.conf.\n# Incoming Tor Network requests for our onion site will be handed\n# over to the EOTK Nginx instance, translated, and passed through to\n# our regular Nginx instance (and vice versa).\n\n# Start service\n&gt; ./eotk start domain_name.com\n</code></pre>\n<h4 id=\"activating-eotk-as-a-systemd-service-and-starting-automatically-on-boot\">Activating EOTK as a Systemd Service and Starting Automatically on Boot</h4>\n<pre><code># This will create the eotk-init.sh and eotk-housekeeping.sh files\n# in the same location as your ./eotk binary. The eotk-init.sh file\n# is a System V-style init script which we can move to the\n# /etc/init.d directory, and then convert it automatically into\n# a Systemd-style service unit. \n&gt; ./eotk make-scripts\n\n&gt; cp eotk-init.sh /etc/init.d\n&gt; update-rc.d eotk-init.sh defaults\n\n# EOTK installation will autostart on boot, and always be available.\nsystemctl start  eotk\nsystemctl status eotk\n</code></pre>\n<h3 id=\"install-trusted-tls-certificates-from-harica-into-eotk\">Install trusted TLS certificates from HARICA into EOTK.</h3>\n<h4 id=\"purchasing-an-onion-tls-certificate-from-harica\">Purchasing an Onion TLS Certificate from HARICA</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Choose “Server Certificates” in <a href=\"https://www.harica.gr\">https://www.harica.gr</a></td>\n</tr>\n<tr>\n<td><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/2.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td>Choose a name for the Key, and give the onion address (ending with .onion)(with a subdomain *. for all the possible subdomains)</td>\n</tr>\n<tr>\n<td><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/3.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/4.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td>30€ per year;     150€ per year with * subdomain</td>\n</tr>\n<tr>\n<td><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/5.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/6.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></td>\n</tr>\n</tbody></table>\n<pre><code>&gt; apt install ruby build-essential\n&gt; git clone --recurse-submodules https://github.com/HARICA-official/onion-csr.git\n&gt; cd onion-csr\n&gt; gem install ffi\n&gt; gcc -shared -o libed25519.so -fPIC ed25519/src/*.c\n&gt; ./onion-csr.rb -n &lt;NONCE&gt; -d ~/eotk/projects.d/domain_name.d/fshy2rdkdxzy42iurxqd-v3.d/\n# The utility should immediately output the onion CSR to the screen. \n</code></pre>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Copy the onion CSR this and submit it to HARICA. When pasting the onion CSR, make sure that there are no extra newlines at the end.</td>\n</tr>\n<tr>\n<td><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/7.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/8.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></td>\n</tr>\n</tbody></table>\n<h4 id=\"installing-signed-tls-certificates-into-eotk\">Installing Signed TLS Certificates into EOTK</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Get the certificate.pem file:</td>\n</tr>\n<tr>\n<td>Go to the Dashboard</td>\n</tr>\n<tr>\n<td><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/9.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></td>\n</tr>\n<tr>\n<td></td>\n</tr>\n<tr>\n<td>Choose Download</td>\n</tr>\n<tr>\n<td><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/10.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></td>\n</tr>\n</tbody></table>\n<pre><code>&gt; rsync -a certificate.pem username@remote:/path/to/destination\n&gt; rsync -a privateKey.pem username@remote:/path/to/destination\n&gt; cp certificate.pem eotk/projects.d/domain_name.d/ssl.d/fshy2rdkdxzy42iurxqd-v3.cert\n&gt; openssl ec -in privateKey.pem -out unlockedKey.pem\n# Enter private key passphrase\n&gt; cp unlockedKey.pem eotk/projects.d/domain_name.d/ssl.d/fshy2rdkdxzy42iurxqd-v3.pem\n&gt; ./eotk nxreload domain_name\n</code></pre>\n<hr>\n<h1 id=\"optimisationtxt\">OPTIMISATION.txt</h1>\n<pre><code>This document describes configuration options which may help one to generate onions faster.\nFirst of all, default configuration options are tuned for portability, and may be a bit suboptimal.\nUser is expected to pick optimal settings depending on hardware mkp224o will run on and ammount of filters.\n\n\nED25519 implementations:\nmkp224o includes multiple implementations of ed25519 code, tuned for different processors.\nImplementation is selected at configuration time, when running `./configure` script.\nIf one already configured/compiled code and wants to change options, just re-run\n`./configure` and also run `make clean` to clear compiled files, if any.\nNote that options and CFLAGS/LDFLAGS settings won&#39;t carry over from previous configure run,\nso you have to include options you&#39;ve previously configured, if you want them to remain.\nAt the time of writing, these implementations are present:\n+----------------+-----------------------+----------------------------------------------------------+\n| implementation | enable flag           | notes                                                    |\n|----------------+-----------------------+----------------------------------------------------------+\n| ref10          | --enable-ref10        | SUPERCOP&#39; ref10, pure C, very portable, previous default |\n| amd64-51-30k   | --enable-amd64-51-30k | SUPERCOP&#39; amd64-51-30k, only works on x86_64             |\n| amd64-64-24k   | --enable-amd64-64-24k | SUPERCOP&#39; amd64-64-24k, only works on x86_64             |\n| ed25519-donna  | --enable-donna        | based on amd64-51-30k, C, portable, current default      |\n| ed25519-donna  | --enable-donna-sse2   | uses SSE2, needs x86 architecture                        |\n+----------------+-----------------------+----------------------------------------------------------+\nWhen to use what:\n - on 32-bit x86 architecture &quot;--enable-donna&quot; will probably be fastest, but one should try\n   using &quot;--enable-donna-sse2&quot; too\n - on 64-bit x86 architecture, it really depends on your processor; &quot;--enable-amd64-51-30k&quot;\n   worked best for me, but you should really benchmark on your own machine\n - on ARM &quot;--enable-donna&quot; will probably work best\n - otherwise you should benchmark, but &quot;--enable-donna&quot; will probably win\n\nPlease note, that these recomendations may become out of date if more implementations\nare added in the future; use `./configure --help` to obtain all available options.\nWhen in doubt, benchmark.\n\n\nOnion filtering settings:\nmkp224o supports multiple algorithms and data types for filtering.\nDepending on your use case, picking right settings may increase performance.\nAt the time of writing, mkp224o supports 2 algorithms for filter searching:\nsequential and binary search. Sequential search is default, and will probably\nbe faster with small ammount of filters. If you have lots of filters (lets say &gt;100),\nthen picking binary search algorithm is the right way.\nmkp224o also supports multiple filter types: filters can be represented as integers\ninstead of being binary strings, and that can allow better compiler&#39;s optimizations\nand faster code (dealing with fixed-size integers instead of variable-length strings is simpler).\nOn the other hand, fixed size integers limit length of filters, therefore\nbinary strings are used by default.\n\nCurrent options, at the time of writing:\n  --enable-binsearch      enable binary search algoritm; MUCH faster if there\n                          are a lot of filters. by default, if this isn&#39;t enabled,\n                          sequential search is used\n\n  --enable-intfilter[=(32|64|128|native)]\n                          use integers of specific size (in bits) [default=64]\n                          for filtering. faster but limits filter length to:\n                          6 for 32-bit, 12 for 64-bit, 24 for 128-bit. by default,\n                          if this option is not enabled, binary strings are used,\n                          which are slower, but not limited in length.\n\n  --enable-binfilterlen=VAL\n                          set binary string filter length (if you don&#39;t use intfilter).\n                          default is 32 (bytes), which is maximum key length.\n                          this may be useful for decreasing memory usage if you\n                          have a lot of short filters, but then using intfilter\n                          may be better idea.\n\n  --enable-besort         force intfilter binsearch case to use big endian\n                          sorting and not omit masks from filters; useful if\n                          your filters aren&#39;t of same length.\n                          let me elaborate on this one.\n                          by default, when binary search algorithm is used with integer\n                          filters, we actually omit filter masks and use global mask variable,\n                          because otherwise we couldn&#39;t reliably use integer comparison operations\n                          combined with per-filter masks, as sorting order there is unclear.\n                          this is because majority of processors we work with are little-endian.\n                          therefore, to achieve proper filtering in case where filters\n                          aren&#39;t of same length, we flatten them by inserting more filters.\n                          binary searching should balance increased overhead here to some extent,\n                          but this is definitely not optimal and can bloat filtering table\n                          very heavily in some cases (for example if there exists say 1-char filter\n                          and 8-char filter, it will try to flatten 1-char filterto 8 chars\n                          and add 32*32*32*32*32*32*32 filters to table which isn&#39;t really good).\n                          this option makes us use big-endian way of integer comparison, which isn&#39;t\n                          native for current little-endian processors but should still work much better\n                          than binary strings. we also then are able to have proper per-filter masks,\n                          and don&#39;t do stupid flattening tricks which may backfire.\n\n                          TL;DR: its quite good idea to use this if you do &quot;--enable-binsearch --enable-intfilter&quot;\n                          and have some random filters which may have different length.\n\n\nBatch mode:\nmkp224o now includes experimental key generation mode which performs certain operations in batches,\nand is around 15 times faster than current default.\nIt is currently experimental, and is activated by -B run-time flag.\nBatched element count is configured by --enable-batchnum=number option at configure time,\nincreasing or decreasing it may make batch mode faster or slower, depending on hardware.\n\n\nBenchmarking:\nIt&#39;s always good idea to see if your settings give you desired effect.\nThere currently isn&#39;t any automated way to benchmark different configuration options, but it&#39;s pretty simple to do by hand.\nFor example:\n# prepare configuration script\n./autogen.sh\n# try default configuration\n./configure\n# compile\nmake\n# benchmark implementation speed\n./mkp224o -s -d res1 neko\n# wait for a while, copy statistics to some text editor\n^C # stop experiment when you&#39;ve collected enough data\n# try with different settings now\n./configure --enable-amd64-64-24k --enable-intfilter\n# clean old compiled files\nmake clean\n# recompile\nmake\n# benchmark again\n./mkp224o -s -d res2 neko\n# wait for a while, copy statistics to some text editor\n^C # stop experiment when you&#39;ve collected enough data\n# configure again, make clean, make, run test again.......\n# until you&#39;ve got enough data to make decisions\n\nwhen benchmarking filtering settings, remember to actually use filter files you&#39;re going to work with.\n\n\nWhat options I use:\nFor my lappy with old-ish i5 I do `./configure --enable-amd64-51-30k --enable-intfilter` incase I want single onion,\nand `./configure --enable-amd64-51-30k --enable-intfilter --enable-binsearch --enable-besort` when playing with dictionaries.\nFor my raspberry pi 2, `./configure --enable-donna --enable-intfilter`\n(and also +=&quot; --enable-binsearch --enable-besort&quot; for dictionaries).\n</code></pre>\n<h1 id=\"iiwikipediatconf\">[ii]wikipedia.tconf</h1>\n<pre><code>&gt; less ~/eotk/demo.d/wikipedia.tconf\n# -*- conf -*-\n# eotk (c) 2017 Alec Muffett\n\n# CSVs of canonical domains (eg: email) to preserve (todo: more here?)\n# nb: you must explicitly list all domains that are of preservation;\n# &quot;foo.com&quot; &amp; &quot;www.foo.com&quot; are treated as separate, for this purpose\nset preserve_csv \\\n    tld-wp,wikipedia\\\\.org,i,wikipedia.org \\\n    tld-wm,wikimedia\\\\.org,i,wikimedia.org\n\n# FIX THIS TO USE A LOCAL RESOLVER, BECAUSE PERFORMANCE\nset nginx_resolver \\\n    8.8.8.8 \\\n    8.8.4.4 \\\n    ipv6=off\n\n# cache persistence &amp; size; sized for RaspberryPi (256m)\nset nginx_cache_seconds 60\nset nginx_cache_size 256m\nset nginx_tmpfile_size 64m\n\n# proof-of-concept: let&#39;s make this read-only:\nset suppress_methods_except_get 1\n\n# proof-of-concept: block access to some hosts\nset block_host_re \\\n    ^(login|donate)\\\\.\n\n# proof-of-concept: block access to some paths\nset block_path_re \\\n    /User: \\\n    /Special:(UserLogin|(Create|Merge)Account|RenameRequest)\\\\b\n\n# proof-of-concept: block requests where parameters have certain values\nset block_param_re \\\n    title,^User: \\\n    title,^Special:(UserLogin|(Create|Merge)Account|RenameRequest)\\\\b\n\n# proof-of-concept: blacklist requests to some paths\nset path_blacklist_re \\\n    ^\\\\. \\\n    ^\\\\w+\\\\.php$ \\\n    \\\\.(sql|gz|tgz|zip|bz2)$ \\\n    ^server-status$\n\n# proof-of-concept: whitelist reasonable user-agents (anything else =&gt; ded)\nset user_agent_whitelist_re \\\n    ^Mozilla.*Gecko\n\n# suggestion: you might want to investigate &quot;no_cache_content_type&quot; or\n# &quot;no_cache_host&quot; if you want limitations on caching...\n\n# demo: CSV list to implement ownership proof URIs for EV SSL issuance\n# set hardcoded_endpoint_csv \\\n#     ^/proof/foo/?$,&quot;FOOPROOF&quot; \\\n#     ^/proof/bar/?$,&quot;BARPROOF&quot;\n\n# demo: magic cookie-issuing URL to restrict access until ready to launch\n# set cookie_lock /open-sesame\n\n# index of other onion sites (&quot;what happens in onion, should stay in onion&quot;)\nforeignmap facebookwkhpilnemxj7asaniu7vnjjbiltxjqhye3mhbshg7kx5tfyd facebook.com\n\n# the Wikimedia Foundation have lots of sites\nset project wikipedia\nhardmap %NEW_V3_ONION% mediawiki.org\nhardmap %NEW_V3_ONION% wikidata.org\nhardmap %NEW_V3_ONION% wikimedia.org\nhardmap %NEW_V3_ONION% wikimediafoundation.org\n# the following have an `m` subdomain\nhardmap %NEW_V3_ONION% wikibooks.org m\nhardmap %NEW_V3_ONION% wikinews.org m\nhardmap %NEW_V3_ONION% wikipedia.org m\nhardmap %NEW_V3_ONION% wikiquote.org m\nhardmap %NEW_V3_ONION% wikisource.org m\nhardmap %NEW_V3_ONION% wikiversity.org m\nhardmap %NEW_V3_ONION% wikivoyage.org m\nhardmap %NEW_V3_ONION% wiktionary.org m\n# nb: by subdomain we mean FOO in en.FOO.wikipedia.org, etc.\nhardmap %NEW_V3_ONION% wikidata.org\nhardmap %NEW_V3_ONION% wikimedia.org\nhardmap %NEW_V3_ONION% wikimediafoundation.org\n# the following have an `m` subdomain\nhardmap %NEW_V3_ONION% wikibooks.org m\nhardmap %NEW_V3_ONION% wikinews.org m\nhardmap %NEW_V3_ONION% wikipedia.org m\nhardmap %NEW_V3_ONION% wikiquote.org m\nhardmap %NEW_V3_ONION% wikisource.org m\nhardmap %NEW_V3_ONION% wikiversity.org m\nhardmap %NEW_V3_ONION% wikivoyage.org m\nhardmap %NEW_V3_ONION% wiktionary.org m\n# nb: by subdomain we mean FOO in en.FOO.wikipedia.org, etc.\n</code></pre>\n<h1 id=\"iii\">[iii]</h1>\n<p><figure class=\"post__image\"><img loading=\"lazy\" src=\"media/files/11.png\" data-is-external-image=\"true\"  alt=\"\" /></figure></p>\n<p>./eotk config domain_name.conf command will generate tor.conf and nginx.conf</p>\n<h1 id=\"torconf\">tor.conf</h1>\n<pre><code>&gt; cat ~/eotk/projects.d/domain.d/tor.conf\n\n# -*- conf -*-\n# eotk (c) 2017 Alec Muffett\n\nDataDirectory /home/server/eotk/projects.d/domain_name.d\nControlPort unix:/home/server/eotk/projects.d/domain_name.d/tor-control.sock\nPidFile /home/server/eotk/projects.d/domain_name.d/tor.pid\nLog notice file /home/server/eotk/projects.d/domain_name.d/log.d/tor.log\nSafeLogging 1\nHeartbeatPeriod 60 minutes\nLongLivedPorts 80,443\nRunAsDaemon 1\n\n# use single onions, many settings to tweak:\nSocksPort 0\nHiddenServiceSingleHopMode 1\nHiddenServiceNonAnonymousMode 1\n\n# hardmap for: domain_name.com -&gt; fshy2rdkdxzy42iurxqdj4opmm4mbpohc57mqc7dolzwjtbbmm76u6iy.onion\nHiddenServiceDir /home/server/eotk/projects.d/_domain_name_.d/fshy2rdkdxzy42iurxqd-v3.d\nHiddenServicePort 80 unix:/home/server/eotk/projects.d/domain_name.d/fshy2rdkdxzy42iurxqd-v3.d/port-80.sock\nHiddenServicePort 443 unix:/home/server/eotk/projects.d/domain_name.d/fshy2rdkdxzy42iurxqd-v3.d/port-443.sock\nHiddenServiceVersion 3\n</code></pre>\n",
            "author": {
                "name": "Toni"
            },
            "tags": [
            ],
            "date_published": "2022-06-02T17:27:14+01:00",
            "date_modified": "2022-06-02T17:59:45+01:00"
        }
    ]
}
